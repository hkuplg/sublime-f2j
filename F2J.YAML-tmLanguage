# [PackageDev] target_format: plist, ext: tmLanguage
---
name: F2J
scopeName: source.f2j
fileTypes: ["sf"]
uuid: 571d3901-a922-4ea8-a839-4da85c1b28d0

patterns:
    - comment: Comments
      name: comment.line.f2j
      match: "(--).*$\\n?"
    - comment: Control keywords
      name: keyword.control.f2j
      match: \b(let|rec|and|type|module|end|then|else|if|in|case|data|of|new)\b
    - comment: Constants
      name: constant.language.f2j
      match: \b(True|False)\b
    - comment: Seperator
      name: keyword.other.f2j
      match: (;|=[^=]|->)
    - comment: Operators
      name: keyword.operator.f2j
      match: ((\+|-[^>]|\*|/|~|^)|(==|[a-zA-Z0-9_ ]<=?|[a-zA-Z0-9_ ]>=?|!=?|&&?|\|\|?))
    - comment: Strings
      name: string.quoted.double.f2j
      begin: '"'
      beginCaptures:
        '0': { name: punctuation.definition.string.begin.c }
      end: '"'
      endCaptures:
        '0': { name: punctuation.definition.string.end.c }
      patterns:
        - match: \\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"'\&])
          name: constant.character.escape.f2j
        - match: \\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+
          name: constant.character.escape.octal.f2j
        - match: \^[A-Z@\[\]\\\^_]
          name: constant.character.escape.control.f2j
    - comment: Char
      name: string.quoted.single.f2j
      begin: "'"
      beginCaptures:
        '0': { name: punctuation.definition.begin.f2j }
      end: "'"
      endCaptures:
        '0': { name: punctuation.definition.end.f2j }
      patterns:
        - match: \\(NUL|SOH|STX|ETX|EOT|ENQ|ACK|BEL|BS|HT|LF|VT|FF|CR|SO|SI|DLE|DC1|DC2|DC3|DC4|NAK|SYN|ETB|CAN|EM|SUB|ESC|FS|GS|RS|US|SP|DEL|[abfnrtv\\\"'\&])
          name: constant.character.escape.f2j
        - match: \\o[0-7]+|\\x[0-9A-Fa-f]+|\\[0-9]+
          name: constant.character.escape.octal.f2j
        - match: \^[A-Z@\[\]\\\^_]
          name: constant.character.escape.control.f2j
    - comment: Storage Type
      name: storage.type.f2j
      match: \b(Int|String|Bool|Char|Float|Double|Unit)\b
    - comment: Numeric
      name: constant.numeric.f2j
      match: \b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)(L|l|UL|ul|u|U|F|f|ll|LL|ull|ULL)?\b
    - comment: Parens
      name: meta.parens.f2j
      begin: \(
      end: \)
      patterns:
        - include: $base
    - comment: Function Definition
      name: meta.function.f2j
      begin: \b(let|and)\s+(?!\(\*)((rec\s+)([a-z_][a-zA-Z0-9_']*)\b|([a-z_][a-zA-Z0-9_']*|\([^)]+\))(?=\s)((?=\s*=\s*(?=fun(?:ction)\b))|(?!\s*=)))
      beginCaptures:
        '1': { name: keyword.other.function-definition.f2j }
        '3': { name: keyword.other.funtion-definition.f2j }
        '4': { name: entity.name.function.f2j }
        '5': { name: entity.name.function.f2j }
      end: (?:(:)\s*([^=]+))?(?:(=)|(=)\s*(?=fun(?:ction)\b))
      endCaptures:
        '1': { name: punctuation.separator.function.type-constraint.f2j }
        '2': { name: storage.type.f2j }
        '3': { name: keyword.operator.f2j }
        '4': { name: keyword.operator.f2j }
      patterns:
        - include: "#variables"
    # - comment: Let definition
    #   begin: \b(let|and)\b
    #   end: \=
    #   match:
    - comment: Type definition
      begin: \b(type)\s+([_A-Za-z][_A-Za-z0-9]*\b)+
      beginCaptures:
        '1': { name: entity.name.type.f2j }
      end: "="
      # match:
      # captures:
      #   '1': { name: entity.name.type.f2j }
    - comment: Variable
      patterns:
        - match: \(\)
        - name: variable.parameter.unit.f2j
...
